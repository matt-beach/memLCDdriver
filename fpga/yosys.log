
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3819 (open-tool-forge build) (git sha1 48d0aeb0, gcc 9.3.0-17ubuntu1~20.04 -Os)


-- Parsing `src/memLCDdriver.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: src/memLCDdriver.v
Parsing Verilog input from `src/memLCDdriver.v' to AST representation.
Generating RTLIL representation for module `\memLCDdriver'.
Successfully finished Verilog frontend.

-- Parsing `src/memlcd_fsm.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: src/memlcd_fsm.v
Parsing Verilog input from `src/memlcd_fsm.v' to AST representation.
Generating RTLIL representation for module `\memlcd_fsm'.
Successfully finished Verilog frontend.

-- Parsing `src/clockdiv.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: src/clockdiv.v
Parsing Verilog input from `src/clockdiv.v' to AST representation.
Generating RTLIL representation for module `\clockdiv'.
Successfully finished Verilog frontend.

-- Parsing `src/spi_s.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: src/spi_s.v
Parsing Verilog input from `src/spi_s.v' to AST representation.
Generating RTLIL representation for module `\spi_s'.
Successfully finished Verilog frontend.

-- Parsing `src/sfifo.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: src/sfifo.v
Parsing Verilog input from `src/sfifo.v' to AST representation.
Generating RTLIL representation for module `\sfifo'.
Successfully finished Verilog frontend.

-- Parsing `src/fifomem.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: src/fifomem.v
Parsing Verilog input from `src/fifomem.v' to AST representation.
Generating RTLIL representation for module `\fifomem'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top memLCDdriver -json fpga/memLCDdriver.json' --

7. Executing SYNTH_ICE40 pass.

7.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

7.2. Executing HIERARCHY pass (managing design hierarchy).

7.2.1. Analyzing design hierarchy..
Top module:  \memLCDdriver
Used module:     \memlcd_fsm
Used module:     \sfifo
Used module:         \fifomem
Used module:     \spi_s
Used module:     \clockdiv
Parameter \DATA_WIDTH = 8

7.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\memlcd_fsm'.
Parameter \DATA_WIDTH = 8
Generating RTLIL representation for module `$paramod\memlcd_fsm\DATA_WIDTH=8'.
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 6

7.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\sfifo'.
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 6
Generating RTLIL representation for module `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6'.
Parameter \SIZE = 20
Parameter \DIVISOR = 16666666

7.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\clockdiv'.
Parameter \SIZE = 20
Parameter \DIVISOR = 16666666
Generating RTLIL representation for module `$paramod\clockdiv\SIZE=20\DIVISOR=16666666'.
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 4

7.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\fifomem'.
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 4
Generating RTLIL representation for module `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=4'.

7.2.6. Analyzing design hierarchy..
Top module:  \memLCDdriver
Used module:     $paramod\memlcd_fsm\DATA_WIDTH=8
Used module:     $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6
Used module:         \fifomem
Used module:     \spi_s
Used module:     $paramod\clockdiv\SIZE=20\DIVISOR=16666666
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 6

7.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\fifomem'.
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 6
Generating RTLIL representation for module `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6'.

7.2.8. Analyzing design hierarchy..
Top module:  \memLCDdriver
Used module:     $paramod\memlcd_fsm\DATA_WIDTH=8
Used module:     $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6
Used module:         $paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6
Used module:     \spi_s
Used module:     $paramod\clockdiv\SIZE=20\DIVISOR=16666666

7.2.9. Analyzing design hierarchy..
Top module:  \memLCDdriver
Used module:     $paramod\memlcd_fsm\DATA_WIDTH=8
Used module:     $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6
Used module:         $paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6
Used module:     \spi_s
Used module:     $paramod\clockdiv\SIZE=20\DIVISOR=16666666
Removing unused module `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=4'.
Removing unused module `\fifomem'.
Removing unused module `\sfifo'.
Removing unused module `\clockdiv'.
Removing unused module `\memlcd_fsm'.
Removed 5 unused modules.

7.3. Executing PROC pass (convert processes to netlists).

7.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1330$389 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1274$382 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1199$378 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1143$371 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1074$368 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1026$365 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:957$362 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:909$359 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:753$351 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:697$344 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:622$340 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:566$333 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:497$330 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:449$327 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:380$324 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:332$321 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$src/clockdiv.v:16$633 in module $paramod\clockdiv\SIZE=20\DIVISOR=16666666.
Marked 1 switch rules as full_case in process $proc$src/spi_s.v:47$86 in module spi_s.
Marked 1 switch rules as full_case in process $proc$src/sfifo.v:92$628 in module $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.
Marked 1 switch rules as full_case in process $proc$src/sfifo.v:81$622 in module $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.
Marked 1 switch rules as full_case in process $proc$src/sfifo.v:70$620 in module $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.
Marked 2 switch rules as full_case in process $proc$src/sfifo.v:59$609 in module $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.
Marked 1 switch rules as full_case in process $proc$src/sfifo.v:50$607 in module $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.
Marked 1 switch rules as full_case in process $proc$src/sfifo.v:41$605 in module $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.
Marked 1 switch rules as full_case in process $proc$src/memlcd_fsm.v:132$592 in module $paramod\memlcd_fsm\DATA_WIDTH=8.
Marked 1 switch rules as full_case in process $proc$src/memlcd_fsm.v:123$588 in module $paramod\memlcd_fsm\DATA_WIDTH=8.
Marked 7 switch rules as full_case in process $proc$src/memlcd_fsm.v:41$529 in module $paramod\memlcd_fsm\DATA_WIDTH=8.
Removed a total of 0 dead cases.

7.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 31 assignments to connections.

7.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$392'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$388'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$381'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$377'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$370'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$367'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$364'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$361'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$358'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$356'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$354'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$350'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$343'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$339'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$332'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$329'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$326'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$323'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$320'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$318'.
  Set init value: \Q = 1'0

7.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1330$389'.
Found async reset \R in `\SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1199$378'.
Found async reset \S in `\SB_DFFNS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1074$368'.
Found async reset \R in `\SB_DFFNR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:957$362'.
Found async reset \S in `\SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:753$351'.
Found async reset \R in `\SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:622$340'.
Found async reset \S in `\SB_DFFS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:497$330'.
Found async reset \R in `\SB_DFFR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:380$324'.
Found async reset \i_reset in `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.$proc$src/clockdiv.v:16$633'.
Found async reset \i_reset in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:70$620'.
Found async reset \i_reset in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:59$609'.
Found async reset \i_reset in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:50$607'.
Found async reset \i_reset in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:41$605'.
Found async reset \i_reset in `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.

7.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$392'.
Creating decoders for process `\SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1330$389'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$388'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1274$382'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$381'.
Creating decoders for process `\SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1199$378'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$377'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1143$371'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$370'.
Creating decoders for process `\SB_DFFNS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1074$368'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$367'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1026$365'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$364'.
Creating decoders for process `\SB_DFFNR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:957$362'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$361'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:909$359'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$358'.
Creating decoders for process `\SB_DFFNE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:866$357'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$356'.
Creating decoders for process `\SB_DFFN.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:830$355'.
Creating decoders for process `\SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$354'.
Creating decoders for process `\SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:753$351'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$350'.
Creating decoders for process `\SB_DFFESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:697$344'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$343'.
Creating decoders for process `\SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:622$340'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$339'.
Creating decoders for process `\SB_DFFESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:566$333'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$332'.
Creating decoders for process `\SB_DFFS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:497$330'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$329'.
Creating decoders for process `\SB_DFFSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:449$327'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$326'.
Creating decoders for process `\SB_DFFR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:380$324'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$323'.
Creating decoders for process `\SB_DFFSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:332$321'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$320'.
Creating decoders for process `\SB_DFFE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:289$319'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$318'.
Creating decoders for process `\SB_DFF.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:253$317'.
Creating decoders for process `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/fifomem.v:20$646'.
     1/3: $0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649
     2/3: $0$memwr$\MEM$src/fifomem.v:22$644_DATA[7:0]$648
     3/3: $0$memwr$\MEM$src/fifomem.v:22$644_ADDR[5:0]$647
Creating decoders for process `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.$proc$src/clockdiv.v:16$633'.
     1/2: $0\counter[19:0]
     2/2: $0\o_clk_div[0:0]
Creating decoders for process `\spi_s.$proc$src/spi_s.v:47$86'.
     1/4: $0\r_rx_indx[2:0]
     2/4: $1$lookahead\r_rx_data$85[7:0]$92
     3/4: $1$bitselwrite$data$src/spi_s.v:49$77[7:0]$91
     4/4: $1$bitselwrite$mask$src/spi_s.v:49$76[7:0]$90
Creating decoders for process `\spi_s.$proc$src/spi_s.v:33$78'.
Creating decoders for process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:92$628'.
     1/1: $0\r_wfull_almost[0:0]
Creating decoders for process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:81$622'.
     1/1: $0\r_rempty_almost[0:0]
Creating decoders for process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:70$620'.
     1/1: $0\r_data_out[7:0]
Creating decoders for process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:59$609'.
     1/1: $0\r_status_cnt[6:0]
Creating decoders for process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:50$607'.
     1/1: $0\r_rd_ptr[5:0]
Creating decoders for process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:41$605'.
     1/1: $0\r_wr_ptr[5:0]
Creating decoders for process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:132$592'.
     1/1: $0\r_finish_frame[0:0]
Creating decoders for process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:123$588'.
     1/1: $1\r_active_h[0:0]
Creating decoders for process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
     1/12: $0\r_rinc[0:0]
     2/12: $0\r_rgb[5:0]
     3/12: $0\r_bck[0:0]
     4/12: $0\r_bsp[0:0]
     5/12: $0\r_gen[0:0]
     6/12: $0\r_gck[0:0]
     7/12: $0\r_gsp[0:0]
     8/12: $0\r_intb[0:0]
     9/12: $0\r_active_h[0:0]
    10/12: $0\r_count_v[9:0]
    11/12: $0\r_count_h[6:0]
    12/12: $0\r_count_iclk[6:0]

7.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.\r_wfull_almost' from process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:92$628'.
No latch inferred for signal `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.\r_rempty_almost' from process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:81$622'.
Latch inferred for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_finish_frame' from process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:132$592': $auto$proc_dlatch.cc:430:proc_dlatch$814
No latch inferred for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_active_h' from process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:123$588'.

7.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1330$389'.
  created $adff cell `$procdff$815' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1274$382'.
  created $dff cell `$procdff$816' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1199$378'.
  created $adff cell `$procdff$817' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1143$371'.
  created $dff cell `$procdff$818' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1074$368'.
  created $adff cell `$procdff$819' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1026$365'.
  created $dff cell `$procdff$820' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:957$362'.
  created $adff cell `$procdff$821' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:909$359'.
  created $dff cell `$procdff$822' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:866$357'.
  created $dff cell `$procdff$823' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:830$355'.
  created $dff cell `$procdff$824' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:753$351'.
  created $adff cell `$procdff$825' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:697$344'.
  created $dff cell `$procdff$826' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:622$340'.
  created $adff cell `$procdff$827' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:566$333'.
  created $dff cell `$procdff$828' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:497$330'.
  created $adff cell `$procdff$829' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:449$327'.
  created $dff cell `$procdff$830' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:380$324'.
  created $adff cell `$procdff$831' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:332$321'.
  created $dff cell `$procdff$832' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:289$319'.
  created $dff cell `$procdff$833' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:253$317'.
  created $dff cell `$procdff$834' with positive edge clock.
Creating register for signal `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$memwr$\MEM$src/fifomem.v:22$644_ADDR' using process `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/fifomem.v:20$646'.
  created $dff cell `$procdff$835' with positive edge clock.
Creating register for signal `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$memwr$\MEM$src/fifomem.v:22$644_DATA' using process `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/fifomem.v:20$646'.
  created $dff cell `$procdff$836' with positive edge clock.
Creating register for signal `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$memwr$\MEM$src/fifomem.v:22$644_EN' using process `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/fifomem.v:20$646'.
  created $dff cell `$procdff$837' with positive edge clock.
Creating register for signal `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.\o_clk_div' using process `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.$proc$src/clockdiv.v:16$633'.
  created $adff cell `$procdff$838' with positive edge clock and positive level reset.
Creating register for signal `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.\counter' using process `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.$proc$src/clockdiv.v:16$633'.
  created $adff cell `$procdff$839' with positive edge clock and positive level reset.
Creating register for signal `\spi_s.\r_rx_data' using process `\spi_s.$proc$src/spi_s.v:47$86'.
  created $dff cell `$procdff$840' with positive edge clock.
Creating register for signal `\spi_s.\r_rx_indx' using process `\spi_s.$proc$src/spi_s.v:47$86'.
  created $dff cell `$procdff$841' with positive edge clock.
Creating register for signal `\spi_s.$bitselwrite$mask$src/spi_s.v:49$76' using process `\spi_s.$proc$src/spi_s.v:47$86'.
  created $dff cell `$procdff$842' with positive edge clock.
Creating register for signal `\spi_s.$bitselwrite$data$src/spi_s.v:49$77' using process `\spi_s.$proc$src/spi_s.v:47$86'.
  created $dff cell `$procdff$843' with positive edge clock.
Creating register for signal `\spi_s.$lookahead\r_rx_data$85' using process `\spi_s.$proc$src/spi_s.v:47$86'.
  created $dff cell `$procdff$844' with positive edge clock.
Creating register for signal `\spi_s.\r_spi_mosi' using process `\spi_s.$proc$src/spi_s.v:33$78'.
  created $dff cell `$procdff$845' with positive edge clock.
Creating register for signal `\spi_s.\r_spi_nss' using process `\spi_s.$proc$src/spi_s.v:33$78'.
  created $dff cell `$procdff$846' with positive edge clock.
Creating register for signal `\spi_s.\r_spi_clk' using process `\spi_s.$proc$src/spi_s.v:33$78'.
  created $dff cell `$procdff$847' with positive edge clock.
Creating register for signal `\spi_s.\r_prev_spi_clk' using process `\spi_s.$proc$src/spi_s.v:33$78'.
  created $dff cell `$procdff$848' with positive edge clock.
Creating register for signal `\spi_s.\r_prev_spi_nss' using process `\spi_s.$proc$src/spi_s.v:33$78'.
  created $dff cell `$procdff$849' with positive edge clock.
Creating register for signal `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.\r_data_out' using process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:70$620'.
  created $adff cell `$procdff$850' with positive edge clock and positive level reset.
Creating register for signal `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.\r_status_cnt' using process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:59$609'.
  created $adff cell `$procdff$851' with positive edge clock and positive level reset.
Creating register for signal `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.\r_rd_ptr' using process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:50$607'.
  created $adff cell `$procdff$852' with positive edge clock and positive level reset.
Creating register for signal `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.\r_wr_ptr' using process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:41$605'.
  created $adff cell `$procdff$853' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_count_iclk' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$854' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_count_h' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$855' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_count_v' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$856' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_active_h' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$857' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_intb' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$858' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_gsp' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$859' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_gck' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$860' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_gen' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$861' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_bsp' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$862' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_bck' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$863' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_rgb' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$864' with positive edge clock and positive level reset.
Creating register for signal `$paramod\memlcd_fsm\DATA_WIDTH=8.\r_rinc' using process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
  created $adff cell `$procdff$865' with positive edge clock and positive level reset.

7.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$392'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1330$389'.
Removing empty process `SB_DFFNES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1330$389'.
Removing empty process `SB_DFFNESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$388'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1274$382'.
Removing empty process `SB_DFFNESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1274$382'.
Removing empty process `SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$381'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1199$378'.
Removing empty process `SB_DFFNER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1199$378'.
Removing empty process `SB_DFFNESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$377'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1143$371'.
Removing empty process `SB_DFFNESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1143$371'.
Removing empty process `SB_DFFNS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$370'.
Removing empty process `SB_DFFNS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1074$368'.
Removing empty process `SB_DFFNSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$367'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1026$365'.
Removing empty process `SB_DFFNSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:1026$365'.
Removing empty process `SB_DFFNR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$364'.
Removing empty process `SB_DFFNR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:957$362'.
Removing empty process `SB_DFFNSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$361'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:909$359'.
Removing empty process `SB_DFFNSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:909$359'.
Removing empty process `SB_DFFNE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$358'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:866$357'.
Removing empty process `SB_DFFNE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:866$357'.
Removing empty process `SB_DFFN.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$356'.
Removing empty process `SB_DFFN.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:830$355'.
Removing empty process `SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$354'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:753$351'.
Removing empty process `SB_DFFES.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:753$351'.
Removing empty process `SB_DFFESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$350'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:697$344'.
Removing empty process `SB_DFFESS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:697$344'.
Removing empty process `SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$343'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:622$340'.
Removing empty process `SB_DFFER.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:622$340'.
Removing empty process `SB_DFFESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$339'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:566$333'.
Removing empty process `SB_DFFESR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:566$333'.
Removing empty process `SB_DFFS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$332'.
Removing empty process `SB_DFFS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:497$330'.
Removing empty process `SB_DFFSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$329'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:449$327'.
Removing empty process `SB_DFFSS.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:449$327'.
Removing empty process `SB_DFFR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$326'.
Removing empty process `SB_DFFR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:380$324'.
Removing empty process `SB_DFFSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$323'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:332$321'.
Removing empty process `SB_DFFSR.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:332$321'.
Removing empty process `SB_DFFE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$320'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:289$319'.
Removing empty process `SB_DFFE.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:289$319'.
Removing empty process `SB_DFF.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:0$318'.
Removing empty process `SB_DFF.$proc$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_sim.v:253$317'.
Found and cleaned up 1 empty switch in `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/fifomem.v:20$646'.
Removing empty process `$paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/fifomem.v:20$646'.
Found and cleaned up 1 empty switch in `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.$proc$src/clockdiv.v:16$633'.
Removing empty process `$paramod\clockdiv\SIZE=20\DIVISOR=16666666.$proc$src/clockdiv.v:16$633'.
Found and cleaned up 1 empty switch in `\spi_s.$proc$src/spi_s.v:47$86'.
Removing empty process `spi_s.$proc$src/spi_s.v:47$86'.
Removing empty process `spi_s.$proc$src/spi_s.v:33$78'.
Found and cleaned up 1 empty switch in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:92$628'.
Removing empty process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:92$628'.
Found and cleaned up 1 empty switch in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:81$622'.
Removing empty process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:81$622'.
Found and cleaned up 1 empty switch in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:70$620'.
Removing empty process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:70$620'.
Found and cleaned up 2 empty switches in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:59$609'.
Removing empty process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:59$609'.
Found and cleaned up 1 empty switch in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:50$607'.
Removing empty process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:50$607'.
Found and cleaned up 1 empty switch in `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:41$605'.
Removing empty process `$paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.$proc$src/sfifo.v:41$605'.
Found and cleaned up 2 empty switches in `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:132$592'.
Removing empty process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:132$592'.
Found and cleaned up 1 empty switch in `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:123$588'.
Removing empty process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:123$588'.
Found and cleaned up 14 empty switches in `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
Removing empty process `$paramod\memlcd_fsm\DATA_WIDTH=8.$proc$src/memlcd_fsm.v:41$529'.
Cleaned up 45 empty switches.

7.4. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\fifomem\DATA_WIDTH=8\ADDR_WIDTH=6.
Deleting now unused module $paramod\clockdiv\SIZE=20\DIVISOR=16666666.
Deleting now unused module spi_s.
Deleting now unused module $paramod\sfifo\DATA_WIDTH=8\ADDR_WIDTH=6.
Deleting now unused module $paramod\memlcd_fsm\DATA_WIDTH=8.
<suppressed ~5 debug messages>

7.5. Executing TRIBUF pass.

7.6. Executing DEMINOUT pass (demote inout ports to input or output).

7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.
<suppressed ~16 debug messages>

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 9 unused cells and 114 unused wires.
<suppressed ~13 debug messages>

7.9. Executing CHECK pass (checking for obvious problems).
Checking module memLCDdriver...
Warning: multiple conflicting drivers for memLCDdriver.\memlcd_fsm.r_active_h:
    port Q[0] of cell $flatten\memlcd_fsm.$procdff$857 ($adff)
    port Y[0] of cell $flatten\memlcd_fsm.$procmux$740 ($mux)
Found and reported 1 problems.

7.10. Executing OPT pass (performing simple optimizations).

7.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

7.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

7.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
    Consolidated identical input bits for $mux cell $flatten\sfifo.\fifomem.$procmux$695:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649
      New ports: A=1'0, B=1'1, Y=$flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0]
      New connections: $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [7:1] = { $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0] $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0] $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0] $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0] $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0] $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0] $flatten\sfifo.\fifomem.$0$memwr$\MEM$src/fifomem.v:22$644_EN[7:0]$649 [0] }
  Optimizing cells in module \memLCDdriver.
Performed a total of 1 changes.

7.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.10.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $flatten\vcom_clockdiv.$procdff$838 ($adff) from module memLCDdriver (removing D path).
Setting constant 0-bit at position 0 on $flatten\vcom_clockdiv.$procdff$838 ($adff) from module memLCDdriver.
Handling D = Q on $flatten\memlcd_fsm.$procdff$857 ($adff) from module memLCDdriver (removing D path).
Setting constant 0-bit at position 0 on $flatten\memlcd_fsm.$procdff$857 ($adff) from module memLCDdriver.

7.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Warning: Driver-driver conflict for \memlcd_fsm.r_active_h between cell $flatten\memlcd_fsm.$procmux$740.Y and constant 1'0 in memLCDdriver: Resolved using constant.
Removed 4 unused cells and 19 unused wires.
<suppressed ~5 debug messages>

7.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.
<suppressed ~10 debug messages>

7.10.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

7.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.10.13. Executing OPT_DFF pass (perform DFF optimizations).

7.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 25 unused cells and 42 unused wires.
<suppressed ~40 debug messages>

7.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.10.16. Rerunning OPT passes. (Maybe there is more to do..)

7.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

7.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.10.20. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $flatten\memlcd_fsm.$procdff$863 ($adff) from module memLCDdriver (removing D path).
Setting constant 0-bit at position 0 on $flatten\memlcd_fsm.$procdff$863 ($adff) from module memLCDdriver.

7.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.10.23. Rerunning OPT passes. (Maybe there is more to do..)

7.10.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

7.10.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.10.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.10.27. Executing OPT_DFF pass (perform DFF optimizations).

7.10.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.10.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.10.30. Finished OPT passes. (There is nothing left to do.)

7.11. Executing FSM pass (extract and optimize FSM).

7.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking memLCDdriver.memlcd_fsm.r_rgb as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

7.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.12. Executing OPT pass (performing simple optimizations).

7.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

7.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\sfifo.$procdff$853 ($adff) from module memLCDdriver (D = $flatten\sfifo.$add$src/sfifo.v:45$606_Y [5:0], Q = \sfifo.r_wr_ptr).
Adding EN signal on $flatten\sfifo.$procdff$852 ($adff) from module memLCDdriver (D = $flatten\sfifo.$add$src/sfifo.v:54$608_Y [5:0], Q = \sfifo.r_rd_ptr).
Adding EN signal on $flatten\sfifo.$procdff$851 ($adff) from module memLCDdriver (D = $flatten\sfifo.$0\r_status_cnt[6:0], Q = \sfifo.r_status_cnt).
Adding EN signal on $flatten\memlcd_fsm.$procdff$865 ($adff) from module memLCDdriver (D = 1'0, Q = \memlcd_fsm.r_rinc).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$871 ($adffe) from module memLCDdriver.
Adding EN signal on $flatten\memlcd_fsm.$procdff$864 ($adff) from module memLCDdriver (D = 6'000000, Q = \memlcd_fsm.r_rgb).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$872 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$872 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$872 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$872 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$872 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$872 ($adffe) from module memLCDdriver.
Adding EN signal on $flatten\memlcd_fsm.$procdff$862 ($adff) from module memLCDdriver (D = 1'0, Q = \memlcd_fsm.r_bsp).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$875 ($adffe) from module memLCDdriver.
Adding EN signal on $flatten\memlcd_fsm.$procdff$861 ($adff) from module memLCDdriver (D = $flatten\memlcd_fsm.$procmux$764_Y, Q = \memlcd_fsm.r_gen).
Adding EN signal on $flatten\memlcd_fsm.$procdff$860 ($adff) from module memLCDdriver (D = $flatten\memlcd_fsm.$not$src/memlcd_fsm.v:96$568_Y, Q = \memlcd_fsm.r_gck).
Adding EN signal on $flatten\memlcd_fsm.$procdff$859 ($adff) from module memLCDdriver (D = $flatten\memlcd_fsm.$procmux$775_Y, Q = \memlcd_fsm.r_gsp).
Adding EN signal on $flatten\memlcd_fsm.$procdff$858 ($adff) from module memLCDdriver (D = $flatten\memlcd_fsm.$procmux$782_Y, Q = \memlcd_fsm.r_intb).
Adding EN signal on $flatten\memlcd_fsm.$procdff$856 ($adff) from module memLCDdriver (D = $flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:65$544_Y [9:0], Q = \memlcd_fsm.r_count_v).
Adding EN signal on $flatten\memlcd_fsm.$procdff$855 ($adff) from module memLCDdriver (D = $flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:62$538_Y [6:0], Q = \memlcd_fsm.r_count_h).
Adding EN signal on $flatten\memlcd_fsm.$procdff$854 ($adff) from module memLCDdriver (D = $flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:60$534_Y [6:0], Q = \memlcd_fsm.r_count_iclk).

7.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 20 unused cells and 20 unused wires.
<suppressed ~21 debug messages>

7.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.
<suppressed ~10 debug messages>

7.12.9. Rerunning OPT passes. (Maybe there is more to do..)

7.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

7.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.12.13. Executing OPT_DFF pass (perform DFF optimizations).

7.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 3 unused cells and 9 unused wires.
<suppressed ~4 debug messages>

7.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.12.16. Rerunning OPT passes. (Maybe there is more to do..)

7.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

7.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.12.20. Executing OPT_DFF pass (perform DFF optimizations).
Handling never-active EN on $auto$opt_dff.cc:764:run$867 ($adffe) from module memLCDdriver (removing D path).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$867 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$867 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$867 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$867 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$867 ($adffe) from module memLCDdriver.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$867 ($adffe) from module memLCDdriver.

7.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

7.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.
<suppressed ~1 debug messages>

7.12.23. Rerunning OPT passes. (Maybe there is more to do..)

7.12.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

7.12.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.12.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.12.27. Executing OPT_DFF pass (perform DFF optimizations).

7.12.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

7.12.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.12.30. Rerunning OPT passes. (Maybe there is more to do..)

7.12.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

7.12.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.12.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.12.34. Executing OPT_DFF pass (perform DFF optimizations).

7.12.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.12.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.12.37. Finished OPT passes. (There is nothing left to do.)

7.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell memLCDdriver.$flatten\spi_s.$ternary$src/spi_s.v:57$107 ($mux).
Removed top 29 bits (of 32) from mux cell memLCDdriver.$flatten\spi_s.$ternary$src/spi_s.v:55$104 ($mux).
Removed top 29 bits (of 32) from mux cell memLCDdriver.$flatten\spi_s.$ternary$src/spi_s.v:50$101 ($mux).
Removed top 31 bits (of 32) from port B of cell memLCDdriver.$flatten\spi_s.$sub$src/spi_s.v:50$100 ($sub).
Removed top 29 bits (of 32) from port Y of cell memLCDdriver.$flatten\spi_s.$sub$src/spi_s.v:50$100 ($sub).
Removed top 31 bits (of 32) from port B of cell memLCDdriver.$flatten\spi_s.$gt$src/spi_s.v:50$99 ($gt).
Removed cell memLCDdriver.$flatten\sfifo.$procmux$725 ($mux).
Removed top 29 bits (of 32) from port B of cell memLCDdriver.$flatten\sfifo.$lt$src/sfifo.v:93$630 ($lt).
Removed top 31 bits (of 32) from port B of cell memLCDdriver.$flatten\sfifo.$gt$src/sfifo.v:93$629 ($gt).
Removed top 5 bits (of 6) from port A of cell memLCDdriver.$flatten\sfifo.$sub$src/sfifo.v:90$627 ($sub).
Removed top 5 bits (of 6) from port Y of cell memLCDdriver.$flatten\sfifo.$sub$src/sfifo.v:90$627 ($sub).
Removed top 5 bits (of 6) from port B of cell memLCDdriver.$flatten\sfifo.$sub$src/sfifo.v:90$627 ($sub).
Removed top 29 bits (of 32) from port B of cell memLCDdriver.$flatten\sfifo.$lt$src/sfifo.v:82$624 ($lt).
Removed top 31 bits (of 32) from port B of cell memLCDdriver.$flatten\sfifo.$gt$src/sfifo.v:82$623 ($gt).
Removed top 31 bits (of 32) from port B of cell memLCDdriver.$flatten\sfifo.$add$src/sfifo.v:65$619 ($add).
Removed top 25 bits (of 32) from port Y of cell memLCDdriver.$flatten\sfifo.$add$src/sfifo.v:65$619 ($add).
Removed top 31 bits (of 32) from port B of cell memLCDdriver.$flatten\sfifo.$add$src/sfifo.v:45$606 ($add).
Removed top 26 bits (of 32) from port Y of cell memLCDdriver.$flatten\sfifo.$add$src/sfifo.v:45$606 ($add).
Removed top 1 bits (of 7) from port B of cell memLCDdriver.$flatten\sfifo.$eq$src/sfifo.v:33$599 ($eq).
Removed cell memLCDdriver.$flatten\memlcd_fsm.$procmux$779 ($mux).
Removed cell memLCDdriver.$flatten\memlcd_fsm.$procmux$772 ($mux).
Removed top 25 bits (of 32) from port B of cell memLCDdriver.$flatten\memlcd_fsm.$lt$src/memlcd_fsm.v:107$580 ($lt).
Removed top 26 bits (of 32) from port B of cell memLCDdriver.$flatten\memlcd_fsm.$gt$src/memlcd_fsm.v:107$578 ($gt).
Removed top 22 bits (of 32) from port B of cell memLCDdriver.$flatten\memlcd_fsm.$lt$src/memlcd_fsm.v:107$576 ($lt).
Removed top 31 bits (of 32) from port B of cell memLCDdriver.$flatten\memlcd_fsm.$gt$src/memlcd_fsm.v:107$575 ($gt).
Removed top 9 bits (of 10) from port B of cell memLCDdriver.$flatten\memlcd_fsm.$eq$src/memlcd_fsm.v:102$572 ($eq).
Removed top 2 bits (of 7) from port B of cell memLCDdriver.$flatten\memlcd_fsm.$eq$src/memlcd_fsm.v:95$565 ($eq).
Removed top 22 bits (of 32) from mux cell memLCDdriver.$flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:65$544 ($mux).
Removed top 22 bits (of 32) from port Y of cell memLCDdriver.$flatten\memlcd_fsm.$add$src/memlcd_fsm.v:65$543 ($add).
Removed top 25 bits (of 32) from mux cell memLCDdriver.$flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:62$538 ($mux).
Removed top 25 bits (of 32) from port Y of cell memLCDdriver.$flatten\memlcd_fsm.$add$src/memlcd_fsm.v:62$537 ($add).
Removed top 25 bits (of 32) from mux cell memLCDdriver.$flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:60$534 ($mux).
Removed top 25 bits (of 32) from port Y of cell memLCDdriver.$flatten\memlcd_fsm.$add$src/memlcd_fsm.v:60$533 ($add).
Removed top 25 bits (of 32) from wire memLCDdriver.$flatten\memlcd_fsm.$add$src/memlcd_fsm.v:60$533_Y.
Removed top 25 bits (of 32) from wire memLCDdriver.$flatten\memlcd_fsm.$add$src/memlcd_fsm.v:62$537_Y.
Removed top 22 bits (of 32) from wire memLCDdriver.$flatten\memlcd_fsm.$add$src/memlcd_fsm.v:65$543_Y.
Removed top 25 bits (of 32) from wire memLCDdriver.$flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:60$534_Y.
Removed top 26 bits (of 32) from wire memLCDdriver.$flatten\memlcd_fsm.$ternary$src/memlcd_fsm.v:65$544_Y.
Removed top 26 bits (of 32) from wire memLCDdriver.$flatten\sfifo.$add$src/sfifo.v:45$606_Y.
Removed top 29 bits (of 32) from wire memLCDdriver.$flatten\spi_s.$sub$src/spi_s.v:50$100_Y.
Removed top 29 bits (of 32) from wire memLCDdriver.$flatten\spi_s.$ternary$src/spi_s.v:50$101_Y.

7.14. Executing PEEPOPT pass (run peephole optimizers).

7.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

7.16. Executing SHARE pass (SAT-based resource sharing).

7.17. Executing TECHMAP pass (map to technology primitives).

7.17.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

7.17.2. Continuing TECHMAP pass.
Using template $paramod$11cb8311a6b3c4f0d6dc798774e978dc0fc18b4e\_90_lut_cmp_ for cells of type $gt.
Using template $paramod$a94dbb8272905436f9367a961c5fa3d51b65bbdb\_90_lut_cmp_ for cells of type $lt.
Using template $paramod$cf052c1e8339b6717d1acedbc3be19ede852d676\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~206 debug messages>

7.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

7.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module memLCDdriver:
  creating $macc model for $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:60$533 ($add).
  creating $macc model for $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:62$537 ($add).
  creating $macc model for $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:65$543 ($add).
  creating $macc model for $flatten\sfifo.$add$src/sfifo.v:45$606 ($add).
  creating $macc model for $flatten\sfifo.$add$src/sfifo.v:65$619 ($add).
  creating $macc model for $flatten\sfifo.$sub$src/sfifo.v:90$627 ($sub).
  creating $macc model for $flatten\spi_s.$sub$src/spi_s.v:50$100 ($sub).
  creating $alu model for $macc $flatten\spi_s.$sub$src/spi_s.v:50$100.
  creating $alu model for $macc $flatten\sfifo.$sub$src/sfifo.v:90$627.
  creating $alu model for $macc $flatten\sfifo.$add$src/sfifo.v:65$619.
  creating $alu model for $macc $flatten\sfifo.$add$src/sfifo.v:45$606.
  creating $alu model for $macc $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:65$543.
  creating $alu model for $macc $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:62$537.
  creating $alu model for $macc $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:60$533.
  creating $alu model for $flatten\memlcd_fsm.$gt$src/memlcd_fsm.v:107$575 ($gt): new $alu
  creating $alu model for $flatten\memlcd_fsm.$gt$src/memlcd_fsm.v:107$578 ($gt): new $alu
  creating $alu model for $flatten\memlcd_fsm.$lt$src/memlcd_fsm.v:107$576 ($lt): new $alu
  creating $alu model for $flatten\memlcd_fsm.$lt$src/memlcd_fsm.v:107$580 ($lt): new $alu
  creating $alu model for $flatten\memlcd_fsm.$eq$src/memlcd_fsm.v:102$572 ($eq): merged with $flatten\memlcd_fsm.$gt$src/memlcd_fsm.v:107$575.
  creating $alu cell for $flatten\memlcd_fsm.$lt$src/memlcd_fsm.v:107$580: $auto$alumacc.cc:485:replace_alu$917
  creating $alu cell for $flatten\memlcd_fsm.$lt$src/memlcd_fsm.v:107$576: $auto$alumacc.cc:485:replace_alu$922
  creating $alu cell for $flatten\memlcd_fsm.$gt$src/memlcd_fsm.v:107$578: $auto$alumacc.cc:485:replace_alu$927
  creating $alu cell for $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:60$533: $auto$alumacc.cc:485:replace_alu$932
  creating $alu cell for $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:62$537: $auto$alumacc.cc:485:replace_alu$935
  creating $alu cell for $flatten\memlcd_fsm.$gt$src/memlcd_fsm.v:107$575, $flatten\memlcd_fsm.$eq$src/memlcd_fsm.v:102$572: $auto$alumacc.cc:485:replace_alu$938
  creating $alu cell for $flatten\memlcd_fsm.$add$src/memlcd_fsm.v:65$543: $auto$alumacc.cc:485:replace_alu$945
  creating $alu cell for $flatten\sfifo.$add$src/sfifo.v:45$606: $auto$alumacc.cc:485:replace_alu$948
  creating $alu cell for $flatten\sfifo.$add$src/sfifo.v:65$619: $auto$alumacc.cc:485:replace_alu$951
  creating $alu cell for $flatten\sfifo.$sub$src/sfifo.v:90$627: $auto$alumacc.cc:485:replace_alu$954
  creating $alu cell for $flatten\spi_s.$sub$src/spi_s.v:50$100: $auto$alumacc.cc:485:replace_alu$957
  created 11 $alu and 0 $macc cells.

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

7.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.21.6. Executing OPT_DFF pass (perform DFF optimizations).

7.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

7.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.21.9. Rerunning OPT passes. (Maybe there is more to do..)

7.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

7.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.21.13. Executing OPT_DFF pass (perform DFF optimizations).

7.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.21.16. Finished OPT passes. (There is nothing left to do.)

7.22. Executing MEMORY pass.

7.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

7.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

7.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

7.25. Executing TECHMAP pass (map to technology primitives).

7.25.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

7.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

7.26. Executing ICE40_BRAMINIT pass.

7.27. Executing OPT pass (performing simple optimizations).

7.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.
<suppressed ~9 debug messages>

7.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

7.27.3. Executing OPT_DFF pass (perform DFF optimizations).

7.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 1 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

7.27.5. Finished fast OPT passes.

7.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.29. Executing OPT pass (performing simple optimizations).

7.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memLCDdriver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

7.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memLCDdriver.
Performed a total of 0 changes.

7.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.29.6. Executing OPT_DFF pass (perform DFF optimizations).

7.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.29.9. Finished OPT passes. (There is nothing left to do.)

7.30. Executing ICE40_WRAPCARRY pass (wrap carries).

7.31. Executing TECHMAP pass (map to technology primitives).

7.31.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.31.2. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

7.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~501 debug messages>

7.32. Executing OPT pass (performing simple optimizations).

7.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.
<suppressed ~303 debug messages>

7.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
<suppressed ~318 debug messages>
Removed a total of 106 cells.

7.32.3. Executing OPT_DFF pass (perform DFF optimizations).

7.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 8 unused cells and 287 unused wires.
<suppressed ~9 debug messages>

7.32.5. Finished fast OPT passes.

7.33. Executing ICE40_OPT pass (performing simple optimizations).

7.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$917.slice[0].carry: CO=\memlcd_fsm.r_count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$922.slice[0].carry: CO=\memlcd_fsm.r_count_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$927.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$927.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$932.slice[0].carry: CO=\memlcd_fsm.r_count_iclk [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$935.slice[0].carry: CO=\memlcd_fsm.r_count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$938.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$938.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$945.slice[0].carry: CO=\memlcd_fsm.r_count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$948.slice[0].carry: CO=\sfifo.r_wr_ptr [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$951.slice[0].carry: CO=\sfifo.r_status_cnt [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) memLCDdriver.$auto$alumacc.cc:485:replace_alu$957.slice[0].carry: CO=\spi_s.w_rx_indx [0]

7.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.33.4. Executing OPT_DFF pass (perform DFF optimizations).

7.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 4 unused cells and 0 unused wires.
<suppressed ~4 debug messages>

7.33.6. Rerunning OPT passes. (Removed registers in this run.)

7.33.7. Running ICE40 specific optimizations.

7.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.33.10. Executing OPT_DFF pass (perform DFF optimizations).

7.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.33.12. Finished OPT passes. (There is nothing left to do.)

7.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

7.35. Executing TECHMAP pass (map to technology primitives).

7.35.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

7.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~70 debug messages>

7.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping memLCDdriver.$auto$alumacc.cc:485:replace_alu$932.slice[0].carry ($lut).
Mapping memLCDdriver.$auto$alumacc.cc:485:replace_alu$935.slice[0].carry ($lut).
Mapping memLCDdriver.$auto$alumacc.cc:485:replace_alu$945.slice[0].carry ($lut).
Mapping memLCDdriver.$auto$alumacc.cc:485:replace_alu$948.slice[0].carry ($lut).
Mapping memLCDdriver.$auto$alumacc.cc:485:replace_alu$951.slice[0].carry ($lut).
Mapping memLCDdriver.$auto$alumacc.cc:485:replace_alu$957.slice[0].carry ($lut).

7.38. Executing ICE40_OPT pass (performing simple optimizations).

7.38.1. Running ICE40 specific optimizations.

7.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.
<suppressed ~112 debug messages>

7.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

7.38.4. Executing OPT_DFF pass (perform DFF optimizations).

7.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..
Removed 0 unused cells and 300 unused wires.
<suppressed ~1 debug messages>

7.38.6. Rerunning OPT passes. (Removed registers in this run.)

7.38.7. Running ICE40 specific optimizations.

7.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memLCDdriver.

7.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memLCDdriver'.
Removed a total of 0 cells.

7.38.10. Executing OPT_DFF pass (perform DFF optimizations).

7.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memLCDdriver..

7.38.12. Finished OPT passes. (There is nothing left to do.)

7.39. Executing TECHMAP pass (map to technology primitives).

7.39.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

7.39.2. Continuing TECHMAP pass.

7.39.3. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping \$_DLATCH_N_.$ternary$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/latches_map.v:4$2072 ($mux).
Mapping \$_DLATCH_N_.$logic_not$/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/latches_map.v:4$2071 ($logic_not).
<suppressed ~4 debug messages>

7.39.4. Executing OPT pass (performing simple optimizations).

7.39.4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DLATCH_N_.
<suppressed ~1 debug messages>

7.39.4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DLATCH_N_'.
Removed a total of 0 cells.

7.39.4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DLATCH_N_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.39.4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DLATCH_N_.
Performed a total of 0 changes.

7.39.4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DLATCH_N_'.
Removed a total of 0 cells.

7.39.4.6. Executing OPT_DFF pass (perform DFF optimizations).

7.39.4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DLATCH_N_..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

7.39.4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DLATCH_N_.

7.39.4.9. Rerunning OPT passes. (Maybe there is more to do..)

7.39.4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DLATCH_N_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.39.4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DLATCH_N_.
Performed a total of 0 changes.

7.39.4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DLATCH_N_'.
Removed a total of 0 cells.

7.39.4.13. Executing OPT_DFF pass (perform DFF optimizations).

7.39.4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DLATCH_N_..

7.39.4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DLATCH_N_.

7.39.4.16. Finished OPT passes. (There is nothing left to do.)
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
No more expansions possible.
<suppressed ~1 debug messages>

7.40. Executing ABC pass (technology mapping using ABC).

7.40.1. Extracting gate netlist of module `\memLCDdriver' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$2077: \memlcd_fsm.r_finish_frame -> $flatten\memlcd_fsm.$logic_or$src/memlcd_fsm.v:58$531_Y
                                              \memlcd_fsm.r_finish_frame -> \memlcd_fsm.r_finish_frame
Extracted 199 gates and 269 wires to a netlist network with 69 inputs and 65 outputs.

7.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      71.
ABC: Participating nodes from both networks       =     152.
ABC: Participating nodes from the first network   =      71. (  72.45 % of nodes)
ABC: Participating nodes from the second network  =      81. (  82.65 % of nodes)
ABC: Node pairs (any polarity)                    =      71. (  72.45 % of names can be moved)
ABC: Node pairs (same polarity)                   =      61. (  62.24 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

7.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       97
ABC RESULTS:        internal signals:      135
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       65
Removing temp directory.

7.41. Executing ICE40_WRAPCARRY pass (wrap carries).

7.42. Executing TECHMAP pass (map to technology primitives).

7.42.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

7.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 48 unused cells and 230 unused wires.

7.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      126
  1-LUT               22
  2-LUT               62
  3-LUT               13
  4-LUT               29

Eliminating LUTs.
Number of LUTs:      126
  1-LUT               22
  2-LUT               62
  3-LUT               13
  4-LUT               29

Combining LUTs.
Number of LUTs:      103
  1-LUT               22
  2-LUT               18
  3-LUT               34
  4-LUT               29

Eliminated 0 LUTs.
Combined 23 LUTs.
<suppressed ~790 debug messages>

7.44. Executing TECHMAP pass (map to technology primitives).

7.44.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/yosys_nightly/fpga-toolchain/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

7.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110010111100 for cells of type $lut.
No more expansions possible.
<suppressed ~392 debug messages>
Removed 0 unused cells and 220 unused wires.

7.45. Executing AUTONAME pass.
Renamed 1677 objects in module memLCDdriver (20 iterations).
<suppressed ~278 debug messages>

7.46. Executing HIERARCHY pass (managing design hierarchy).

7.46.1. Analyzing design hierarchy..
Top module:  \memLCDdriver

7.46.2. Analyzing design hierarchy..
Top module:  \memLCDdriver
Removed 0 unused modules.

7.47. Printing statistics.

=== memLCDdriver ===

   Number of wires:                160
   Number of wire bits:            412
   Number of public wires:         160
   Number of public wire bits:     412
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                198
     SB_CARRY                       52
     SB_DFF                          7
     SB_DFFER                       26
     SB_DFFES                       10
     SB_LUT4                       103

7.48. Executing CHECK pass (checking for obvious problems).
Checking module memLCDdriver...
Found and reported 0 problems.

7.49. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 7e26011c19, CPU: user 0.34s system 0.75s, MEM: 59.93 MB peak
Yosys 0.9+3819 (open-tool-forge build) (git sha1 48d0aeb0, gcc 9.3.0-17ubuntu1~20.04 -Os)
Time spent: 18% 16x read_verilog (0 sec), 16% 28x opt_clean (0 sec), ...
